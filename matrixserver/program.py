import fastjsonschema
import zmq
from matrixserver.message_handler import MessageHandler
from rpi_rgb_led_matrix.bindings.python.rgbmatrix import RGBMatrix, RGBMatrixOptions


class Program:
    def __init__(self, config):
        context = zmq.Context()
        self.socket = context.socket(zmq.REP)
        self.socket.bind("tcp://*:5555")

        options = RGBMatrixOptions()
        options.rows = 64
        options.cols = 64
        options.chain_length = 2
        options.hardware_mapping = "adafruit-hat"
        self.matrix = RGBMatrix(options=options)

        self.message_handler = MessageHandler(self.matrix, config.matrix_action_schema)

        self.validate = fastjsonschema.compile(config.matrix_response_schema)

    def start(self):
        while True:
            self.loop()

    def loop(self):
        msg = self.socket.recv_json()
        print("Received: {}".format(msg))
        response = self.message_handler.handle_message(msg)

        # Make sure the reponse generated by the message handler is validated
        # by the response schema. If not, crash.
        self.validate(response)
        self.socket.send_json(response)
